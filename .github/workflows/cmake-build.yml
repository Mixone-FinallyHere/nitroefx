name: Build and Release Binaries

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: 3.15

      - name: Create build directory
        run: mkdir -p build

      - name: Set up Rust toolchain (Linux only)
        if: runner.os == 'Linux'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup update

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt install libxmu-dev libxi-dev libgl-dev zip autoconf automake libtool pkg-config libglu1-mesa-dev libltdl-dev

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install ninja
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $GITHUB_ENV
          echo "$VCPKG_ROOT" >> $GITHUB_PATH

      - name: Configure CMake
        run: |
          cmake --preset ${{ runner.os == 'Linux' && 'linux-x64' || 'windows-x64' }}-${{ matrix.build_type }}

      - name: Build project
        run: cmake --build build

      - name: Package binaries
        run: |
          mkdir -p artifacts
          cp build/nitroefx* artifacts/
        shell: bash

      - name: Upload binaries as artifacts (v4)
        uses: actions/upload-artifact@v4
        with:
          name: nitroefx-${{ matrix.os }}-${{ matrix.build_type }}
          path: artifacts/
          compression-level: 9  # Maximum compression for smaller artifact sizes

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all artifacts (v4)
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**
          tag_name: ${{ github.sha }}
          name: Release ${{ github.sha }}
          draft: false
          prerelease: false
